package com.example.api.web;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.api.entities.Actor;
import com.example.api.repositories.ActorRepository;
import com.example.api.services.ActorServiceImplementation;

public interface playerController {
	@RestController
	@RequestMapping("/api/v1/player")
	@CrossOrigin
	public classr PlayerController {
		@Autowired
		private PlayerRepository playerRepository;
		@Autowired
		private PlayerServiceImplementation playerServiceImplementation;

		@GetMapping("/test")
	public String testCallPlayer() {
		return "PlayerController ok";
	}
		@PostMapping("/addNewPlayer")
		public ResponseEntity <?>createPlayer(@RequestBody Player playerr) {
			try {
			Player savedPlayer = playerServiceImplementation.createPlayer(player);
			return ResponseEntity.ok(savedPlayer);
			
			 }catch(IllegalArgumentException e) {
				 return ResponseEntity.status(HttpStatus.CONFLICT).body(e.getMessage());}
			 }
			
		@GetMapping("/findAll")
		public List<Player> getAllPlayers(){
			return playerRepository.findAll();
		}
		@GetMapping("/findAllActif")
		public Player getAllActivePlayers(){
			return playerRepository.findByIsActiveTrue();
		}

		
		@GetMapping("/{id}")
		public ResponseEntity<Player> getPlayerById(@PathVariable Long id){
			return playerRepository.findById(id)
					.map(ResponseEntity::ok)
					.orElse(ResponseEntity.notFound().build());
		}
		@PutMapping("/{id}")
		public ResponseEntity<Player> updateActor(@PathVariable Long id, @RequestBody Actor actorDetails){
			return playerRepository.findById(id)
					.map(player->{
						player.setLastname(playerDetails.getLastname());
						return ResponseEntity.ok(playerRepository.save(player));
					})
					.orElse(ResponseEntity.notFound().build());
		}
		//soft Delete
		@PutMapping("/delete/{id}")
		public ResponseEntity<Player> deleteSoftly(@PathVariable Long id){
			return playerRepository.findById(id)
					.map(player->{
						player.setActive(false);
						return ResponseEntity.ok(playerRepository.save(player));
					})
					.orElse(ResponseEntity.notFound().build());
		}	
		
	}


}
